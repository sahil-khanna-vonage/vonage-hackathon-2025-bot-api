version: '3.8'

services:
  postgres:
    image: postgres
    container_name: postgres
    env_file:
      - .prod.env
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    networks:
      - bot-api-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    env_file:
      - .prod.env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - bot-api-network
  
  # bot-api:
  #   build: .
  #   restart: on-failure
  #   container_name: bot-api
  #   ports:
  #     - "9090:9090"
  #     - "9091:9091"
  #   networks:
  #     - bot-api-network
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   env_file:
  #     - .prod.env
  #   environment:
  #     - RABBITMQ_HOST=${RABBITMQ_HOST}
  #     - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
  #     - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
  #   volumes:
  #     - ./logs:/app/logs

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  bot-api-network:
    driver: bridge
